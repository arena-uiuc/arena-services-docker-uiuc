# this is the development docker compose; does not include containers not needed and adds some config for development
#
# run development:
#    docker-compose up -d
#
# NOTE: if -f is not given, 'docker-compose up' will use docker-compose.override.yaml (https://docs.docker.com/compose/extends/)

version: '3'

services:

  arena-web: # create a container named "arena-web"; other service containers in this file can resolve its name (arena-web)
    image: "nginx" # creates container from nginx
    volumes:
      - ./conf/arena-web-dev.conf:/etc/nginx/conf.d/arena-web-dev.conf # mount local nginx dev config
      - ./ARENA-core:/usr/share/nginx/html # mount root html from ./ARENA-core
      - ./conf/arena-defaults-dev.js:/usr/share/nginx/html/defaults.js # set arena client code defaults
      - ./data/certbot/conf:/etc/letsencrypt # mount certbot files (used in conf/nginx-conf.d/arena-web.conf)
      - ./data/certbot/www:/var/www/certbot # mount certbot files (used in conf/nginx-conf.d/arena-web.conf)
      - arts-static-content:/usr/share/nginx/html/arts # serve arts static files
      - account-static-content:/usr/share/nginx/html/user/static # serve account static files
    ports:
      - "80:80" # map port 80 on the host to port 80 on the container
      - "443:443"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'" # reload certificates every 6h
    depends_on:
      - mqtt
      - arena-persist
      - store
      - arts
      - arena-auth
      - arena-account

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt # mount certbot files; certificate files will be here
      - ./data/certbot/www:/var/www/certbot # mount certbot files;
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'" # check for certificate updates every 12h

  mongodb:
    image: mongo # pull from https://hub.docker.com/_/mongo/
    volumes:
      - ./data/mongodb:/data/db # permanent storage on the host

  arena-persist:
    build: "arena-persist" # builds container from arena-persist Dockerfile
    user: "node"
    ports:
      - 8884:8884/tcp
    volumes:
      - ./conf/persist-config.json:/home/node/app/config.json # mount updated config.json that uses the container name
    working_dir: /home/node/app
    command: "npm run start"
    depends_on:
      - mongodb
      - mqtt

  arena-auth:
    build: "ARENA-auth" # builds container from arena-persist Dockerfile
    user: "root"
    ports:
      - 8888:8888/tcp
    volumes:
      - ./conf/auth-config.json:/home/node/app/config.json # mount updated config.json that uses indicates right paths and secret
      - ./data/certbot/conf:/etc/letsencrypt
    command: "node index.js -c ./config.json"

  arena-account:
    build: "arena-account" # builds container from arena-account Dockerfile
    volumes:
      - ./conf/arena-account-settings.py:/usr/src/app/arena_account/settings.py
      - account-static-content:/usr/src/app/static # static content
      - ./data/account/db.sqlite3:/usr/src/app/db.sqlite3 # account db
    env_file:
      - .env
      - secret.env
    ports:
      - "8000:8000"
    command: "python manage.py runserver 0.0.0.0:8000"

  mqtt:
    image: conixcenter/arena-broker # pulls from https://hub.docker.com/repository/docker/conixcenter/arena-broker
    volumes:
      - ./conf/mosquitto.conf:/mosquitto/config/mosquitto.conf # mount local config file to /mosquitto/config/mosquitto.conf in the container
      - ./data/certbot/conf:/etc/letsencrypt # mount certs volume (see conf/mosquitto.conf to see how the files are used)
    env_file: secret.env
    ports:
      - 1883:1883/tcp # mqtt; map port for listener configured in /conf/mosquitto.conf
      - 9001:9001/tcp # mqtt-ws
      - 8083:8083/tcp # mqtt-wss
      - 8883:8883/tcp # mqtt-tls

  store:
    image: "conixcenter/arena-store"  # pulls from https://hub.docker.com/repository/docker/conixcenter/arena-store
    volumes:
      - ./conf/arena-store-config.json:/arena-store/.config.json
      - ./ARENA-core/store:/srv-files
      - ./data/arena-store:/arena-store/data

  arts:
    build: "arts/arts-main"
    volumes:
      - ./conf/arts-settings.py:/usr/src/app/arts_api/settings.py
      - arts-static-content:/usr/src/app/public # static arts visualization page
    env_file: secret.env
    ports:
      - "8001:8000"
    working_dir: /usr/src/app
    command: "python manage.py runserver 0.0.0.0:8000"
    depends_on:
      - mqtt

  py-runtime:
    build: "arena-runtime-simulated"
    volumes:
      - ./conf/arena-runtime-simulated.conf:/usr/src/app/config.json
    depends_on:
      - arts

volumes:
  arts-static-content:
  account-static-content:
